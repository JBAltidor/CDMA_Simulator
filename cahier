Modifications
-------------
-les messages ont des trians ternaires au lieu de binaire (1,-1) message et 0 absence de message
-matrice de Walsh ,0 devient -1
-Voltage ajout 0 => 0 volt
-Ajout de padding (suite de 0 a la fin du message le plus cours )



CDMA v2
------------------
Multiplexer ds messages sur un canal par a technique CDMA, decoder ces messages a a la reception et determiner le taux d'erreur binaire.(Bit Error Rate /BER)

1)Un seul utilisateur et absence de bruit
2)Un seul utilisateur avec bruit
3) 2 Utilisateurs sans bruit
4) 2 utilisateurs avec bruit

Utilisateur :generateur d'un message
Message	: train binaire equivalent aux donnees envoyees par l'utilisateur
Bruit 	:Facteur pouvant alterer un message transitant sur le canal

#Hyphotheses supplementaires
+Le systeme est synchrone 
+



Representation
--------------
Utilisateur :?
Message     : Vecteur binaire de dimension N .
Bruit	     :Vecteur de bit aleatoires avec B= A/5 et A = 1.  Noise = B*Random([-1,0,1]) de dimension S

Code de Walsh : matrice binaire 8*8 W = 

|1  1  1  1  1  1  1  1|
|1 -1  1 -1  1 -1  1 -1|
|1  1 -1 -1  1  1 -1 -1|
|1 -1 -1  1  1 -1 -1  1|
|1  1  1  1 -1 -1 -1 -1|
|1 -1  1 -1 -1  1 -1  1|
|1  1 -1 -1 -1 -1  1  1|
|1 -1 -1  1 -1  1  1 -1|

Code utilisateur 1:Key_1 = W[2] 
Code utilisateur 2:Key_2 = W[3]

Processing
----------
#Encoding
Spreaded message : Vecteur binaire de dimension S = N*8. 
Encoded message  :XOR de spreaded message and Key

-Message spreading
 Spreaded = [M[i] 8 fois ,....]
- Message encoding
 Encoded = Spreaded xor Code

#Binaire to voltage
-1=> -1 volt, 0=> 0 volt 1 => 1 volt pour message encode
Encoded_Volt = encoded Representation en volt du message binaire
Key_1_Volt = 
Key_2_Volt =

#Multiplexage
Traffic = Encoded_Volt[1] + Encoded_Volt[2] + Noise

Restitution
------------
Decoded_i   = Traffic * Key_i_Volt #Restitution de message decode par utilisateur
Despreaded = select first bit at every 8 bit

#Voltage to binaire
-cas 1 ou 2 utilisateurs + bruit
 if ( 0,8 < Despreaded[i] < 1,2 ):
 	Message_received[i] = 0
 elif (-1,2 < Despreaded[i] < -0,8) :
 	Message_received[i] = 0
 	
#Code "Correction" #A reflechir
if (Message_received_1[i] == Message_received_2[i] == 0):
	Message_received_1[i] = Random(-1,1)
	Message_received_2[i] = - Message_received_1[i] 
	 

Bit Error Rate
--------------
if (Message[i] <> Message_received[i]):
	error++
	
BER = error / len (Message)

